// social_media_app_hybrid.js

import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, Button, FlatList, Image, StyleSheet, TouchableOpacity, Alert, Modal, ScrollView } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';

const API_URL = 'http://localhost:5000/api'; // Replace with your backend URL

export default function App() {
  const [user, setUser] = useState(null);
  const [posts, setPosts] = useState([]);
  const [content, setContent] = useState('');
  const [image, setImage] = useState(null);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [comments, setComments] = useState('');
  const [selectedPost, setSelectedPost] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);

  // Fetch posts
  useEffect(() => {
    const fetchPosts = async () => {
      try {
        const res = await axios.get(`${API_URL}/posts`);
        setPosts(res.data);
      } catch (err) {
        console.error(err);
      }
    };
    fetchPosts();
  }, []);

  // Handle login
  const login = async () => {
    try {
      if (!email.endsWith('@uq.edu.au')) {
        Alert.alert('Error', 'Only @uq.edu.au emails are allowed');
        return;
      }

      const res = await axios.post(`${API_URL}/login`, { email, password });
      setUser(res.data.user);
      await AsyncStorage.setItem('token', res.data.token);
    } catch (err) {
      Alert.alert('Error', 'Invalid login credentials');
    }
  };

  // Handle post creation
  const createPost = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      const formData = new FormData();
      formData.append('content', content);
      if (image) formData.append('image', { uri: image.uri, name: 'photo.jpg', type: 'image/jpeg' });

      const res = await axios.post(`${API_URL}/posts`, formData, {
        headers: { Authorization: token, 'Content-Type': 'multipart/form-data' },
      });
      setPosts([res.data, ...posts]);
      setContent('');
      setImage(null);
    } catch (err) {
      console.error(err);
      Alert.alert('Error', 'Failed to create post');
    }
  };

  // Handle like
  const likePost = async (postId) => {
    try {
      const token = await AsyncStorage.getItem('token');
      const res = await axios.post(`${API_URL}/posts/${postId}/like`, {}, {
        headers: { Authorization: token },
      });
      setPosts(posts.map((post) => (post._id === postId ? res.data : post)));
    } catch (err) {
      console.error(err);
    }
  };

  // Handle comment
  const commentOnPost = async () => {
    try {
      const token = await AsyncStorage.getItem('token');
      const res = await axios.post(
        `${API_URL}/posts/${selectedPost._id}/comment`,
        { comment: comments },
        { headers: { Authorization: token } }
      );
      setPosts(posts.map((post) => (post._id === selectedPost._id ? res.data : post)));
      setComments('');
      setModalVisible(false);
    } catch (err) {
      console.error(err);
    }
  };

  // Render login screen
  if (!user) {
    return (
      <View style={styles.container}>
        <Text style={styles.title}>Login</Text>
        <TextInput
          style={styles.input}
          placeholder="Email"
          value={email}
          onChangeText={setEmail}
        />
        <TextInput
          style={styles.input}
          placeholder="Password"
          secureTextEntry
          value={password}
          onChangeText={setPassword}
        />
        <Button title="Login" onPress={login} />
      </View>
    );
  }

  // Render main app
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Welcome, {user.username}</Text>
      <TextInput
        style={styles.input}
        placeholder="What's on your mind?"
        value={content}
        onChangeText={setContent}
      />
      <Button title="Post" onPress={createPost} />
      <FlatList
        data={posts}
        keyExtractor={(item) => item._id}
        renderItem={({ item }) => (
          <View style={styles.post}>
            <Text style={styles.postAuthor}>{item.userId.username}</Text>
            <Text>{item.content}</Text>
            {item.image && <Image source={{ uri: item.image }} style={styles.postImage} />}
            <View style={styles.interactions}>
              <TouchableOpacity onPress={() => likePost(item._id)}>
                <Text>Like ({item.likes.length})</Text>
              </TouchableOpacity>
              <TouchableOpacity onPress={() => {
                setSelectedPost(item);
                setModalVisible(true);
              }}>
                <Text>Comment ({item.comments.length})</Text>
              </TouchableOpacity>
            </View>
          </View>
        )}
      />
      <Modal visible={modalVisible} animationType="slide">
        <View style={styles.modalContainer}>
          <Text style={styles.title}>Add a Comment</Text>
          <TextInput
            style={styles.input}
            placeholder="Write a comment..."
            value={comments}
            onChangeText={setComments}
          />
          <Button title="Submit" onPress={commentOnPost} />
          <Button title="Close" onPress={() => setModalVisible(false)} />
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    marginBottom: 10,
    borderRadius: 5,
  },
  post: {
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
  },
  postAuthor: {
    fontWeight: 'bold',
  },
  postImage: {
    width: '100%',
    height: 200,
    marginTop: 10,
  },
  interactions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 10,
  },
  modalContainer: {
    flex: 1,
    padding: 20,
    backgroundColor: '#fff',
    justifyContent: 'center',
  },
});

